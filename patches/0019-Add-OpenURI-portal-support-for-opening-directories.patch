From 7cdc85a69224831970cfb5e146a69d8fbc6f9a16 Mon Sep 17 00:00:00 2001
From: Ryan Gonzalez <rymg19@gmail.com>
Date: Tue, 17 Nov 2020 22:35:26 -0600
Subject: [PATCH 19/21] Add OpenURI portal support for opening directories

---
 chrome/browser/platform_util_linux.cc | 80 +++++++++++++++++++++++----
 1 file changed, 69 insertions(+), 11 deletions(-)

diff --git a/chrome/browser/platform_util_linux.cc b/chrome/browser/platform_util_linux.cc
index cbe3372144544..4bd68ac81d81e 100644
--- a/chrome/browser/platform_util_linux.cc
+++ b/chrome/browser/platform_util_linux.cc
@@ -2,9 +2,11 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include "chrome/browser/platform_util.h"
+#include <fcntl.h>
 
 #include "base/bind.h"
+#include "base/feature_list.h"
+#include "base/files/scoped_file.h"
 #include "base/no_destructor.h"
 #include "base/process/kill.h"
 #include "base/process/launch.h"
@@ -18,9 +20,12 @@
 #include "content/public/browser/notification_observer.h"
 #include "content/public/browser/notification_registrar.h"
 #include "content/public/browser/notification_service.h"
+#include "content/public/common/content_features.h"
 #include "dbus/bus.h"
 #include "dbus/message.h"
+#include "dbus/object_path.h"
 #include "dbus/object_proxy.h"
+#include "ui/gtk/select_file_dialog_impl_portal.h"
 #include "url/gurl.h"
 
 using content::BrowserThread;
@@ -34,6 +39,12 @@ const char kFreedesktopFileManagerPath[] = "/org/freedesktop/FileManager1";
 
 const char kMethodShowItems[] = "ShowItems";
 
+const char kXdgPortalService[] = "org.freedesktop.portal.Desktop";
+const char kXdgPortalPath[] = "/org/freedesktop/portal/desktop";
+const char kOpenURIInterface[] = "org.freedesktop.portal.OpenURI";
+
+const char kMethodOpenDirectory[] = "OpenDirectory";
+
 class ShowItemHelper : public content::NotificationObserver {
  public:
   static ShowItemHelper& GetInstance() {
@@ -58,7 +69,7 @@ class ShowItemHelper : public content::NotificationObserver {
     if (bus_)
       bus_->ShutdownOnDBusThreadAndBlock();
     bus_.reset();
-    filemanager_proxy_ = nullptr;
+    object_proxy_ = nullptr;
   }
 
   void ShowItemInFolder(Profile* profile, const base::FilePath& full_path) {
@@ -71,8 +82,48 @@ class ShowItemHelper : public content::NotificationObserver {
       bus_ = base::MakeRefCounted<dbus::Bus>(bus_options);
     }
 
-    if (!filemanager_proxy_) {
-      filemanager_proxy_ =
+    if (base::FeatureList::IsEnabled(features::kXdgFileChooserPortal)) {
+      ShowItemInFolderUsingXdgPortal(profile, full_path);
+    } else {
+      ShowItemInFolderUsingFileManager(profile, full_path);
+    }
+  }
+
+  void ShowItemInFolderUsingXdgPortal(Profile* profile,
+                                      const base::FilePath& full_path) {
+    if (!object_proxy_) {
+      object_proxy_ = bus_->GetObjectProxy(kXdgPortalService,
+                                           dbus::ObjectPath(kXdgPortalPath));
+    }
+
+    base::ScopedFD fd(open(full_path.value().c_str(), O_RDONLY | O_CLOEXEC));
+    if (!fd.is_valid()) {
+      PLOG(ERROR) << "Failed to open " << full_path.value();
+      // At least open the parent folder if possible.
+      OpenItem(profile, full_path.DirName(), OPEN_FOLDER,
+               OpenOperationCallback());
+      return;
+    }
+
+    dbus::MethodCall open_directory_call(kOpenURIInterface,
+                                         kMethodOpenDirectory);
+    dbus::MessageWriter writer(&open_directory_call);
+
+    writer.AppendString("");  // parent window
+    writer.AppendFileDescriptor(fd.get());
+
+    dbus::MessageWriter options_writer(nullptr);
+    writer.OpenArray("{sv}", &options_writer);
+    writer.CloseContainer(&options_writer);
+
+    PerformBusCall(&open_directory_call, profile, full_path);
+  }
+
+ private:
+  void ShowItemInFolderUsingFileManager(Profile* profile,
+                                        const base::FilePath& full_path) {
+    if (!object_proxy_) {
+      object_proxy_ =
           bus_->GetObjectProxy(kFreedesktopFileManagerName,
                                dbus::ObjectPath(kFreedesktopFileManagerPath));
     }
@@ -85,26 +136,33 @@ class ShowItemHelper : public content::NotificationObserver {
         {"file://" + full_path.value()});  // List of file(s) to highlight.
     writer.AppendString({});               // startup-id
 
+    PerformBusCall(&show_items_call, profile, full_path);
+  }
+
+  void PerformBusCall(dbus::MethodCall* call,
+                      Profile* profile,
+                      const base::FilePath& full_path) {
     // Skip opening the folder during browser tests, to avoid leaving an open
     // file explorer window behind.
     if (!internal::AreShellOperationsAllowed())
       return;
 
-    filemanager_proxy_->CallMethod(
-        &show_items_call, dbus::ObjectProxy::TIMEOUT_USE_DEFAULT,
+    object_proxy_->CallMethod(
+        call, dbus::ObjectProxy::TIMEOUT_USE_DEFAULT,
         base::BindOnce(&ShowItemHelper::ShowItemInFolderResponse,
-                       weak_ptr_factory_.GetWeakPtr(), profile, full_path));
+                       weak_ptr_factory_.GetWeakPtr(), profile,
+                       call->GetMember(), full_path));
   }
 
- private:
   void ShowItemInFolderResponse(Profile* profile,
+                                const std::string& method,
                                 const base::FilePath& full_path,
                                 dbus::Response* response) {
     if (response)
       return;
 
-    LOG(ERROR) << "Error calling " << kMethodShowItems;
-    // If the FileManager1 call fails, at least open the parent folder.
+    LOG(ERROR) << "Error calling " << method;
+    // If the method call fails, at least open the parent folder.
     OpenItem(profile, full_path.DirName(), OPEN_FOLDER,
              OpenOperationCallback());
   }
@@ -112,7 +170,7 @@ class ShowItemHelper : public content::NotificationObserver {
   content::NotificationRegistrar registrar_;
 
   scoped_refptr<dbus::Bus> bus_;
-  dbus::ObjectProxy* filemanager_proxy_ = nullptr;
+  dbus::ObjectProxy* object_proxy_ = nullptr;
 
   base::WeakPtrFactory<ShowItemHelper> weak_ptr_factory_{this};
 };
-- 
2.29.2

