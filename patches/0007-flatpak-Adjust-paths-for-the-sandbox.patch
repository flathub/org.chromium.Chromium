From 07ff264f8a107f516fc43a34d90d54da998ae922 Mon Sep 17 00:00:00 2001
From: Ryan Gonzalez <rymg19@gmail.com>
Date: Tue, 25 Aug 2020 19:26:07 -0500
Subject: [PATCH 07/23] flatpak: Adjust paths for the sandbox

---
 chrome/common/BUILD.gn        |  4 +++
 chrome/common/chrome_paths.cc | 52 +++++++++++++++++++++++++----------
 2 files changed, 42 insertions(+), 14 deletions(-)

diff --git a/chrome/common/BUILD.gn b/chrome/common/BUILD.gn
index 1e81d72976c0d..f87e7065c9426 100644
--- a/chrome/common/BUILD.gn
+++ b/chrome/common/BUILD.gn
@@ -644,6 +644,10 @@ static_library("constants") {
       "//third_party/widevine/cdm:headers",
     ]
   }
+
+  if (is_linux) {
+    deps += [ "//sandbox/linux:sandbox_services" ]
+  }
 }
 
 # Use a static library here because many test binaries depend on this but don't
diff --git a/chrome/common/chrome_paths.cc b/chrome/common/chrome_paths.cc
index 34b525ff22356..dd679af8d27d8 100644
--- a/chrome/common/chrome_paths.cc
+++ b/chrome/common/chrome_paths.cc
@@ -4,6 +4,7 @@
 
 #include "chrome/common/chrome_paths.h"
 
+#include "base/files/file_path.h"
 #include "base/files/file_util.h"
 #include "base/logging.h"
 #include "base/native_library.h"
@@ -38,6 +39,10 @@
 #include "base/win/registry.h"
 #endif
 
+#if defined(OS_LINUX)
+#include "sandbox/linux/services/flatpak_sandbox.h"
+#endif
+
 #if (defined(OS_LINUX) || defined(OS_CHROMEOS)) && BUILDFLAG(ENABLE_WIDEVINE)
 #include "third_party/widevine/cdm/widevine_cdm_common.h"  // nogncheck
 #endif
@@ -189,8 +194,8 @@ bool PathProvider(int key, base::FilePath* result) {
 #else
       if (!GetUserDownloadsDirectory(&cur))
         return false;
-      // Do not create the download directory here, we have done it twice now
-      // and annoyed a lot of users.
+        // Do not create the download directory here, we have done it twice now
+        // and annoyed a lot of users.
 #endif
       break;
     case chrome::DIR_CRASH_DUMPS:
@@ -349,7 +354,7 @@ bool PathProvider(int key, base::FilePath* result) {
 #if defined(OS_MAC)
       cur = base::mac::FrameworkBundlePath();
       cur = cur.Append(FILE_PATH_LITERAL("Resources"))
-               .Append(FILE_PATH_LITERAL("resources.pak"));
+                .Append(FILE_PATH_LITERAL("resources.pak"));
       break;
 #elif defined(OS_ANDROID)
       if (!base::PathService::Get(ui::DIR_RESOURCE_PAKS_ANDROID, &cur))
@@ -423,6 +428,14 @@ bool PathProvider(int key, base::FilePath* result) {
       break;
 #if defined(OS_POSIX) && !defined(OS_MAC) && !defined(OS_OPENBSD)
     case chrome::DIR_POLICY_FILES: {
+#if defined(OS_LINUX)
+      if (sandbox::FlatpakSandbox::GetInstance()->GetSandboxLevel() >
+          sandbox::FlatpakSandbox::SandboxLevel::kNone) {
+        cur = base::FilePath(
+            FILE_PATH_LITERAL("/app/chromium/extensions/policies"));
+        break;
+      }
+#endif
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
       cur = base::FilePath(FILE_PATH_LITERAL("/etc/opt/chrome/policies"));
 #else
@@ -446,7 +459,13 @@ bool PathProvider(int key, base::FilePath* result) {
 #endif
 #if defined(OS_LINUX) || defined(OS_CHROMEOS)
     case chrome::DIR_STANDALONE_EXTERNAL_EXTENSIONS: {
-      cur = base::FilePath(kFilepathSinglePrefExtensions);
+      if (sandbox::FlatpakSandbox::GetInstance()->GetSandboxLevel() >
+          sandbox::FlatpakSandbox::SandboxLevel::kNone) {
+        cur = base::FilePath(
+            FILE_PATH_LITERAL("/app/chromium/extensions/extensions"));
+      } else {
+        cur = base::FilePath(kFilepathSinglePrefExtensions);
+      }
       break;
     }
 #endif
@@ -456,8 +475,8 @@ bool PathProvider(int key, base::FilePath* result) {
         return false;
 
       cur = cur.Append(FILE_PATH_LITERAL("Google"))
-               .Append(FILE_PATH_LITERAL("Chrome"))
-               .Append(FILE_PATH_LITERAL("External Extensions"));
+                .Append(FILE_PATH_LITERAL("Chrome"))
+                .Append(FILE_PATH_LITERAL("External Extensions"));
       create_dir = false;
 #else
       if (!base::PathService::Get(base::DIR_MODULE, &cur))
@@ -483,19 +502,25 @@ bool PathProvider(int key, base::FilePath* result) {
     case chrome::DIR_NATIVE_MESSAGING:
 #if defined(OS_MAC)
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
-      cur = base::FilePath(FILE_PATH_LITERAL(
-           "/Library/Google/Chrome/NativeMessagingHosts"));
+      cur = base::FilePath(
+          FILE_PATH_LITERAL("/Library/Google/Chrome/NativeMessagingHosts"));
 #else
       cur = base::FilePath(FILE_PATH_LITERAL(
           "/Library/Application Support/Chromium/NativeMessagingHosts"));
 #endif
 #else  // defined(OS_MAC)
+      if (sandbox::FlatpakSandbox::GetInstance()->GetSandboxLevel() >
+          sandbox::FlatpakSandbox::SandboxLevel::kNone) {
+        cur = base::FilePath(FILE_PATH_LITERAL(
+            "/app/chromium/extensions/native-messaging-hosts"));
+        break;
+      }
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
-      cur = base::FilePath(FILE_PATH_LITERAL(
-          "/etc/opt/chrome/native-messaging-hosts"));
+      cur = base::FilePath(
+          FILE_PATH_LITERAL("/etc/opt/chrome/native-messaging-hosts"));
 #else
-      cur = base::FilePath(FILE_PATH_LITERAL(
-          "/etc/chromium/native-messaging-hosts"));
+      cur = base::FilePath(
+          FILE_PATH_LITERAL("/etc/chromium/native-messaging-hosts"));
 #endif
 #endif  // !defined(OS_MAC)
       break;
@@ -536,8 +561,7 @@ bool PathProvider(int key, base::FilePath* result) {
 
   // TODO(bauerb): http://crbug.com/259796
   base::ThreadRestrictions::ScopedAllowIO allow_io;
-  if (create_dir && !base::PathExists(cur) &&
-      !base::CreateDirectory(cur))
+  if (create_dir && !base::PathExists(cur) && !base::CreateDirectory(cur))
     return false;
 
   *result = cur;
-- 
2.31.1

