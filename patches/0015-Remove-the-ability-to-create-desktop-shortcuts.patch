From 30a48810e23ac7239bdf89cb2b8f905bc1f39c63 Mon Sep 17 00:00:00 2001
From: Ryan Gonzalez <rymg19@gmail.com>
Date: Wed, 11 Nov 2020 16:51:49 -0600
Subject: [PATCH 15/22] Remove the ability to create desktop shortcuts

---
 .../views/create_application_shortcut_view.cc | 15 +---
 .../views/create_application_shortcut_view.h  |  1 -
 .../components/web_app_shortcut_linux.cc      | 78 +------------------
 3 files changed, 2 insertions(+), 92 deletions(-)

diff --git a/chrome/browser/ui/views/create_application_shortcut_view.cc b/chrome/browser/ui/views/create_application_shortcut_view.cc
index 7015af5f4d731..d970ac0b102d9 100644
--- a/chrome/browser/ui/views/create_application_shortcut_view.cc
+++ b/chrome/browser/ui/views/create_application_shortcut_view.cc
@@ -109,10 +109,6 @@ void CreateChromeApplicationShortcutView::InitControls() {
   create_shortcuts_label->SetHorizontalAlignment(gfx::ALIGN_LEFT);
   create_shortcuts_label->SetMultiLine(true);
 
-  std::unique_ptr<views::Checkbox> desktop_check_box = AddCheckbox(
-      l10n_util::GetStringUTF16(IDS_CREATE_SHORTCUTS_DESKTOP_CHKBOX),
-      profile_->GetPrefs()->GetBoolean(prefs::kWebAppCreateOnDesktop));
-
   std::unique_ptr<views::Checkbox> menu_check_box;
   std::unique_ptr<views::Checkbox> quick_launch_check_box;
 
@@ -168,7 +164,6 @@ void CreateChromeApplicationShortcutView::InitControls() {
       views::GridLayout::kFixedSize,
       provider->GetDistanceMetric(views::DISTANCE_RELATED_CONTROL_VERTICAL));
   layout->StartRow(views::GridLayout::kFixedSize, kTableColumnSetId);
-  desktop_check_box_ = layout->AddView(std::move(desktop_check_box));
 
   const int vertical_spacing =
       provider->GetDistanceMetric(DISTANCE_RELATED_CONTROL_VERTICAL_SMALL);
@@ -203,10 +198,6 @@ bool CreateChromeApplicationShortcutView::IsDialogButtonEnabled(
     // Dialog's not ready because app info hasn't been loaded.
     return false;
 
-  // One of the three location checkboxes must be checked:
-  if (desktop_check_box_->GetChecked())
-    return true;
-
   if (menu_check_box_ && menu_check_box_->GetChecked())
     return true;
 
@@ -235,7 +226,6 @@ void CreateChromeApplicationShortcutView::OnDialogAccepted() {
     return;
 
   web_app::ShortcutLocations creation_locations;
-  creation_locations.on_desktop = desktop_check_box_->GetChecked();
   if (menu_check_box_ && menu_check_box_->GetChecked()) {
     creation_locations.applications_menu_location =
         web_app::APP_MENU_LOCATION_SUBDIR_CHROMEAPPS;
@@ -258,10 +248,7 @@ void CreateChromeApplicationShortcutView::OnDialogAccepted() {
 void CreateChromeApplicationShortcutView::ButtonPressed(
     views::Button* sender,
     const ui::Event& event) {
-  if (sender == desktop_check_box_) {
-    profile_->GetPrefs()->SetBoolean(prefs::kWebAppCreateOnDesktop,
-                                     desktop_check_box_->GetChecked());
-  } else if (sender == menu_check_box_) {
+  if (sender == menu_check_box_) {
     profile_->GetPrefs()->SetBoolean(prefs::kWebAppCreateInAppsMenu,
                                      menu_check_box_->GetChecked());
   } else if (sender == quick_launch_check_box_) {
diff --git a/chrome/browser/ui/views/create_application_shortcut_view.h b/chrome/browser/ui/views/create_application_shortcut_view.h
index 6250145b12856..95779c6c9d76c 100644
--- a/chrome/browser/ui/views/create_application_shortcut_view.h
+++ b/chrome/browser/ui/views/create_application_shortcut_view.h
@@ -71,7 +71,6 @@ class CreateChromeApplicationShortcutView : public views::DialogDelegateView,
   base::Callback<void(bool)> close_callback_;
 
   // May be null if the platform doesn't support a particular location.
-  views::Checkbox* desktop_check_box_ = nullptr;
   views::Checkbox* menu_check_box_ = nullptr;
   views::Checkbox* quick_launch_check_box_ = nullptr;
 
diff --git a/chrome/browser/web_applications/components/web_app_shortcut_linux.cc b/chrome/browser/web_applications/components/web_app_shortcut_linux.cc
index 9b3ea698096da..97e0d6a482041 100644
--- a/chrome/browser/web_applications/components/web_app_shortcut_linux.cc
+++ b/chrome/browser/web_applications/components/web_app_shortcut_linux.cc
@@ -143,51 +143,6 @@ std::string CreateShortcutIcon(const gfx::ImageFamily& icon_images,
   return icon_name;
 }
 
-bool CreateShortcutOnDesktop(const base::FilePath& shortcut_filename,
-                             const std::string& contents) {
-  // Make sure that we will later call openat in a secure way.
-  DCHECK_EQ(shortcut_filename.BaseName().value(), shortcut_filename.value());
-
-  base::FilePath desktop_path;
-  if (!base::PathService::Get(base::DIR_USER_DESKTOP, &desktop_path)) {
-    RecordCreateShortcut(CreateShortcutResult::kFailToGetDesktopPath);
-    return false;
-  }
-
-  int desktop_fd = open(desktop_path.value().c_str(), O_RDONLY | O_DIRECTORY);
-  if (desktop_fd < 0) {
-    RecordCreateShortcut(CreateShortcutResult::kFailToOpenDesktopDir);
-    return false;
-  }
-
-  int fd = openat(desktop_fd, shortcut_filename.value().c_str(),
-                  O_CREAT | O_EXCL | O_WRONLY,
-                  S_IRWXU | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH);
-  if (fd < 0) {
-    if (IGNORE_EINTR(close(desktop_fd)) < 0)
-      PLOG(ERROR) << "close";
-    RecordCreateShortcut(CreateShortcutResult::kFailToOpenShortcutFilepath);
-    return false;
-  }
-
-  if (!base::WriteFileDescriptor(fd, contents.c_str(), contents.size())) {
-    // Delete the file. No shortuct is better than corrupted one. Use unlinkat
-    // to make sure we're deleting the file in the directory we think we are.
-    // Even if an attacker manager to put something other at
-    // |shortcut_filename| we'll just undo their action.
-    RecordCreateShortcut(CreateShortcutResult::kCorruptDesktopShortcut);
-    unlinkat(desktop_fd, shortcut_filename.value().c_str(), 0);
-  }
-
-  if (IGNORE_EINTR(close(fd)) < 0)
-    PLOG(ERROR) << "close";
-
-  if (IGNORE_EINTR(close(desktop_fd)) < 0)
-    PLOG(ERROR) << "close";
-
-  return true;
-}
-
 // Creates a shortcut with |shortcut_filename| and |contents| in the system
 // applications menu. If |directory_filename| is non-empty, creates a sub-menu
 // with |directory_filename| and |directory_contents|, and stores the shortcut
@@ -281,14 +236,6 @@ base::FilePath GetAppShortcutFilename(const base::FilePath& profile_path,
   return base::FilePath(filename.append(".desktop"));
 }
 
-bool DeleteShortcutOnDesktop(const base::FilePath& shortcut_filename) {
-  base::FilePath desktop_path;
-  bool result = false;
-  if (base::PathService::Get(base::DIR_USER_DESKTOP, &desktop_path))
-    result = base::DeleteFile(desktop_path.Append(shortcut_filename));
-  return result;
-}
-
 bool DeleteShortcutInApplicationsMenu(
     const base::FilePath& shortcut_filename,
     const base::FilePath& directory_filename) {
@@ -322,9 +269,6 @@ bool CreateDesktopShortcut(const ShortcutInfo& shortcut_info,
                                                shortcut_info.extension_id);
     // For extensions we do not want duplicate shortcuts. So, delete any that
     // already exist and replace them.
-    if (creation_locations.on_desktop)
-      DeleteShortcutOnDesktop(shortcut_filename);
-
     if (creation_locations.applications_menu_location !=
         APP_MENU_LOCATION_NONE) {
       DeleteShortcutInApplicationsMenu(shortcut_filename, base::FilePath());
@@ -353,14 +297,6 @@ bool CreateDesktopShortcut(const ShortcutInfo& shortcut_info,
     return false;
   }
 
-  if (creation_locations.on_desktop) {
-    std::string contents = shell_integration_linux::GetDesktopFileContents(
-        chrome_exe_path, app_name, shortcut_info.url,
-        shortcut_info.extension_id, shortcut_info.title, icon_name,
-        shortcut_info.profile_path, "", "", false);
-    success = CreateShortcutOnDesktop(shortcut_filename, contents);
-  }
-
   if (creation_locations.applications_menu_location == APP_MENU_LOCATION_NONE) {
     return success;
   }
@@ -458,14 +394,13 @@ bool DeleteDesktopShortcuts(const base::FilePath& profile_path,
       GetAppShortcutFilename(profile_path, extension_id);
   DCHECK(!shortcut_filename.empty());
 
-  bool deleted_from_desktop = DeleteShortcutOnDesktop(shortcut_filename);
   // Delete shortcuts from |kDirectoryFilename|.
   // Note that it is possible that shortcuts were not created in the Chrome Apps
   // directory. It doesn't matter: this will still delete the shortcut even if
   // it isn't in the directory.
   bool deleted_from_application_menu = DeleteShortcutInApplicationsMenu(
       shortcut_filename, base::FilePath(kDirectoryFilename));
-  return (deleted_from_desktop && deleted_from_application_menu);
+  return deleted_from_application_menu;
 }
 
 bool DeleteAllDesktopShortcuts(const base::FilePath& profile_path) {
@@ -474,17 +409,6 @@ bool DeleteAllDesktopShortcuts(const base::FilePath& profile_path) {
 
   std::unique_ptr<base::Environment> env(base::Environment::Create());
   bool result = true;
-  // Delete shortcuts from Desktop.
-  base::FilePath desktop_path;
-  if (base::PathService::Get(base::DIR_USER_DESKTOP, &desktop_path)) {
-    std::vector<base::FilePath> shortcut_filenames_desktop =
-        shell_integration_linux::GetExistingProfileShortcutFilenames(
-            profile_path, desktop_path);
-    for (const auto& shortcut : shortcut_filenames_desktop) {
-      if (!DeleteShortcutOnDesktop(shortcut))
-        result = false;
-    }
-  }
 
   // Delete shortcuts from |kDirectoryFilename|.
   base::FilePath applications_menu =
-- 
2.26.2

